package nosurf

import (
	"crypto/rand"
	"crypto/subtle"
	"encoding/base64"
	"io"
)

/*
There are two types of tokens.

* The unmasked "real" token consists of N random bytes.
  It is stored in a cookie (base64-encoded) and it's the
  "reference" value that sent tokens get compared to.

* The masked "sent" token consists of 2*N bytes:
  N byte key used for one-time pad masking and
  N byte "real" token masked with the said key.
  It is used as a value (base64-encoded as well)
  in forms and/or headers.

Upon processing, both tokens are base64-decoded
and then treated as N and 2*N byte slices.
*/

// A token is generated by returning tokenLength bytes
// from crypto/rand
func generateToken(length int) []byte {
	bytes := make([]byte, length)

	if _, err := io.ReadFull(rand.Reader, bytes); err != nil {
		panic(err)
	}

	return bytes
}

func b64encode(data []byte) string {
	return base64.StdEncoding.EncodeToString(data)
}

func b64decode(data string) []byte {
	decoded, err := base64.StdEncoding.DecodeString(data)
	if err != nil {
		return nil
	}
	return decoded
}

func verifyToken(realToken, sentToken []byte, length int) bool {
	realN := len(realToken)
	sentN := len(sentToken)

	// sentN == tokenLength means the token is unmasked
	// sentN == 2*tokenLength means the token is masked.

	if realN == length && sentN == 2*length {
		return verifyMasked(realToken, sentToken, length)
	}

	return false
}

// Verifies the masked token
func verifyMasked(realToken, sentToken []byte, length int) bool {
	sentPlain := unmaskToken(sentToken, length)
	return subtle.ConstantTimeCompare(realToken, sentPlain) == 1
}
